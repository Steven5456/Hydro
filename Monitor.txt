// Ok good to go maybe I fuckin hope. Lets add stuff to make the particle app work
#include <DS18B20.h>

#include <Adafruit_DHT.h>

#include <ThingSpeak.h>

// This #include statement was automatically added by the Particle IDE.
#include <spark-plotly.h>

// This #include statement was automatically added by the Particle IDE.
#include <SparkIntervalTimer.h>

// This #include statement was automatically added by the Particle IDE.
#include <spark-plotly.h>


IntervalTimer myTimer;	




DHT dht11(2, DHT11); //DHTPIN, DHTTYPE
DHT dht22a(6, DHT22); //DHTPIN, DHTTYPE
DHT dht22b(5, DHT22); //DHTPIN, DHTTYPE

// This #include statement was automatically added by the Particle IDE.
//#include "spark-dallas-temperature/spark-dallas-temperature.h"
// Only include One of the following depending on your environment!
//#include "OneWire/OneWire.h"  // Use this include for the Web IDE:
// #include "OneWire.h" // Use this include for Particle Dev where everything is in one directory.
//#define ONE_WIRE_BUS 4 // Sensor on digital Pin 12 of the Arduino
//OneWire oneWire(ONE_WIRE_BUS); // Setup a oneWire instance to communicate with ANY OneWire devices
//DallasTemperature sensors(&oneWire); // Pass our oneWire reference to Dallas Temperature.
//#include <DS18B20.h>
//#include <math.h>

DS18B20  ds18b20(D4, true); //Sets Pin D2 for Water Temp Sensor and 
double T1, T2, Tavg;
int boardLed = 7;

//Timer timer3(15000, updateThingspeak);

double bme280temp = 0;
double bme280baro = 0;
double bme280humidity = 0;
double bme280altitude = 0;
float analog1 = 0;
float analog2 = 0;
float analog3 = 0;
int count = 0;
int relay = D3;
int reed = D5;
int val = 0;
int intervalmSec = 60000;
int intervalmin = 1;

TCPClient client;
//unsigned int myChannelNumber = 203022; // replace with your ChannelID
//const char * myWriteAPIKey = "TMHJX21RSO4RRPV3"; // replace with your WriteAPIKey
//const String key = "TMHJX21RSO4RRPV3"; //thingspeak write key

#define NUM_TOKENS 4

char *plotly_tokens[NUM_TOKENS] = {"xzinucbnnf", "xj01bmf9az", "01jwkaq0gv","igrp9s58w2"};
plotly graph = plotly("Steven5456", "ynFtjCkOvz19IMWVh26y", plotly_tokens, "Box Monitor", NUM_TOKENS);

void setup() {
  Serial.begin(9600);
  //ThingSpeak.begin(client);
    
      //sensors.begin();      // Start up the OneWire library
    pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
    Particle.subscribe("Button1", myHandler);
	dht11.begin();
	dht22a.begin();
	dht22b.begin();
    
    graph.convertTimestamp = "true"; //Convert millis to a date/time stamp
    graph.timezone = "America/Denver"; //Choose your timezone
   graph.init();
   graph.fileopt = "extend";
   graph.openStream(); 
   
     //myTimer.begin(readSensors, 60000, hmSec);  //use timer to schedule sensor reading and watering events 
     
     //Particle.function("Post Sensors", readSensors); //test using remote control of functions feature (In particle phone app)
     //Particle.variable("Interval", intervalmin); //make watering interval an accessible variable (in particle phone app)

}

void loop() {
    
    intervalmSec = intervalmin * 60000;
    

    	



}

int readSensors()
{
      digitalWrite(boardLed,HIGH);
  
  String DSTemp = String(ds18b20.getTemperature());
  Particle.publish("DS18B20 Sensor Temp", DSTemp); 
  //ThingSpeak.setField(5,ds18b20.getTemperature());
  delay(100);
  
  Particle.publish("DHT11 Sensor Temp", String(dht11.getTempCelcius()));
  Particle.publish("DHT11 Sensor Humidity", String(dht11.getHumidity()));
  //ThingSpeak.setField(1,dht11.getTempCelcius());
    //ThingSpeak.setField(2,dht11.getHumidity());
  delay(100);
  
  String DHT22aTemp = String(dht22a.getTempCelcius());
  Particle.publish("DHT22a Sensor Temp", DHT22aTemp);
  //Particle.publish("googleDocs", "{\"DHT22Temp\":\"" + tempMessage + "\"}", 60, PRIVATE);
  String DHT22aRH = String(dht22a.getHumidity());
  Particle.publish("DHT22a Sensor Humidity", DHT22aRH);
  //Particle.publish("googleDocs", "{\"DHT22RH\":\"" + tempMessage + "\"}", 60, PRIVATE);
    //ThingSpeak.setField(3,dht22a.getTempCelcius());
    //ThingSpeak.setField(4,dht22a.getHumidity());
    
  String DHT22bTemp = String(dht22b.getTempCelcius());
  Particle.publish("DHT22b Sensor Temp", DHT22bTemp);
  String DHT22bRH = String(dht22b.getHumidity());
  Particle.publish("DHT22b Sensor Humidity", DHT22bRH);
  
  //ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);  
  Particle.publish("googleDocs", "{\"DSTemp\":\"" + DSTemp + "\", \"DHT22aTemp\":\"" + DHT22aTemp + "\", \"DHT22aRH\":\"" + DHT22aRH + "\", \"DHT22bTemp\":\"" + DHT22bTemp + "\", \"DHT22bRH\":\"" + DHT22bRH + "\"}", 60, PRIVATE);
  digitalWrite(boardLed,LOW);
  delay(6000);
  
      unsigned long x = millis();

    //graph.plot(x, ds18b20.getTemperature(), plotly_tokens[0]);
    //graph.plot(x, dht22a.getTempCelcius(), plotly_tokens[1]);
    //graph.plot(x, dht22a.getHumidity(), plotly_tokens[2]);
    //graph.plot(x, dht22b.getHumidity(), plotly_tokens[3]);
    
    return 1;
}

//The function that handles the event from IFTTT
void myHandler(const char *event, const char *data){
    
    Particle.publish("DO_Button1", "Pushed");
    // We'll turn the LED on
    digitalWrite(boardLed, HIGH);
    
    // We'll leave it on for 1 second...
    delay(5000);
    
    // Then we'll turn it off...
    digitalWrite(boardLed, LOW);
}

